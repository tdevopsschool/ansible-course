---

- name: provision server
  hosts: all
  become: true
  become_user: root
  vars:
    sshgroup_name: sshusers
    user:
      login: deploy
      password_hash:
        "$6$NwI7op8FHR1VQta6$zuQXHtNtM/7SRQsf1./18WbBrHMq4mT88nWh67ThmlWcqyVX3F\
        BTY9uj/07tR9ViDEvjg6/bh0y3mSjeDQYe3."
      authorized_key:
        "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr\
        +kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6I\
        edplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2\
        hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZE\
        nDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHln\
        VYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key"
      group: "{{ sshgroup_name }}"
  tasks:
    - name: sshusers group is presented
      group:
        name: "{{ sshgroup_name }}"
        state: present

    - name: Admin account {{ user.login }} is presented
      user:
        name: "{{ user.login }}"
        groups: "{{ user.group }}"
        shell: /bin/bash
        update_password: always
        password: "{{ user.password_hash }}"

    - name: Admins {{ user.login }} can sudo without password
      lineinfile:
        dest: /etc/sudoers
        state: present
        line: "{{ user.login }} ALL=(ALL:ALL) NOPASSWD:ALL"
        validate: '/usr/sbin/visudo -cf %s'

    - name: Authorized key for {{ user.login }} user is presented
      authorized_key:
        user: "{{ user.login }}"
        state: present
        key: "{{ user.authorized_key }}"

    - name: Software are installed
      yum:
        name:
          - httpd
          - git
          - net-snmp
          - net-snmp-utils
        state: present

    - name: Repo is checked out
      git:
        repo: https://github.com/ultral/2048.git
        dest: /var/www/html
        force: true
        version: HEAD

    - name: Access via HTTP is allowed
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: "80"
        ctstate: NEW
        syn: match
        jump: ACCEPT
        comment: Accept new http connections.
  
    - name: Allow snmp port 161
      iptables:
        chain: INPUT
        protocol: udp
        destination_port: "161"
        ctstate: NEW
        jump: ACCEPT
        comment: Accept new snmp udp package.

    - name: Snmpd is started and enabled
      systemd:
        name: snmpd
        enabled: true
        state: started
        daemon_reload: true

    - name: Copy a new "snmpd.conf file into /etc/snmpd/snmpd.conf
      copy:
        src: /vagrant/snmpd.conf
        dest: /etc/snmp/snmpd.conf
        owner: root
        group: root
        mode: '0600'
        force: yes
        backup: yes
      register: snmpdconf
  
    - name: Snmpd is started and enabled
      systemd:
        name: snmpd
        enabled: true
        state: started
        daemon_reload: true

    - name: Httpd is started
      systemd:
        name: httpd
        enabled: true
        state: started
        daemon_reload: true

    - name: Generate a prived key 
      openssl_privatekey:
        path: /etc/ssl/certs/ansible.com.key
        size: 2048 

# hasn't found an adequate way to check to avoid re-creating
#    - openssl_certificate_info: # if file not exist return fail
#        path: /etc/ssl/certs/ansible.com.csr
#      register: result_csr

    - name: Generate a openssl_csr
      openssl_csr:
        path: /etc/ssl/certs/ansible.com.csr
        privatekey_path: /etc/ssl/certs/ansible.com.key
#      when: result_csr is failed

    - name: Generate selfsigned
      openssl_certificate:
        path: /etc/ssl/certs/ansible.com.csr
        privatekey_path: /etc/ssl/certs/ansible.com.key
        csr_path: /etc/ssl/certs/ansible.com.csr
        provider: selfsigned
#      when: result_csr is failed    

    - name: Print message
      debug:
        msg: "Site locates at http://localhost:8080/"